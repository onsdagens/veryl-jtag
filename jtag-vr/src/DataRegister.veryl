// TODO: Use a type parameter instead, for now it seems there is no language support
module DataRegister::<DataSize: u32> #(
    // Hopefully this is automatically cast for complex types
    param InitialValue: logic<DataSize>    = 0              ,
    param Width       : u32         = DataSize,
    param Addr        : logic   <4> = 0              ,
    param Writeable   : bool        = false          ,
) (
    bit_out: output logic          ,
    tck_i  : input  clock          ,
    rst_ni : input  reset_async_low,

    cdr_i        : input logic   ,
    sdr_i        : input logic   ,
    tdi_i        : input logic   ,
    udr_i        : input logic   ,
    instruction_i: input logic<4>,
) {
    var shift_register: logic<DataSize>;
    assign bit_out        = shift_register[lsb];
    var register      : logic<DataSize>;
    always_ff {
        if_reset {
            shift_register = 0;
            register       = InitialValue;
        } else {
            // capture DR
            if cdr_i {
                shift_register = register;
            } else if sdr_i {
                shift_register                      = shift_register >> 1;
                shift_register[msb] = tdi_i;
            } else if udr_i && Writeable {
                register = shift_register;
            }

        }
    }
}
